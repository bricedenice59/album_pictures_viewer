@{
    ViewData["Title"] = "Hidden Page";
}

<div>

    <main>
        <div>
            <!-- Container for the Table of content -->
            <div>
                <div>
                    <!-- div to display the generated registration token -->
                    <div id="token_div" style="display: none;">
                        <p id="token" style="word-break: break-all;"></p>
                        <button onclick="deleteToken()">
                            Delete Token
                        </button>
                    </div>
                    <!-- div to display messages received by this app. -->
                    <div id="messages"></div>
                </div>
            </div>

        </div>
    </main>
</div>

@section Scripts{

    <script type="text/javascript">

        // Your web app's Firebase configuration
        var firebaseConfig = {
            apiKey: "AIzaSyCxzMY4OPmJTJ3FNRt4GUKXx723tvItoiY",
            authDomain: "notifsethtx.firebaseapp.com",
            projectId: "notifsethtx",
            storageBucket: "notifsethtx.appspot.com",
            messagingSenderId: "848586593355",
            appId: "1:848586593355:web:1a3451890cdd62098ba9ce"
        };
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        // Retrieve Firebase Messaging object.
        const messaging = firebase.messaging();

        // IDs of divs that display registration token UI or request permission UI.
        const tokenDivId = 'token_div';

        // Handle incoming messages. Called when:
        // - a message is received while the app has focus
        // - the user clicks on an app notification created by a service worker
        // `messaging.onBackgroundMessage` handler.
        messaging.onMessage((payload) => {
            console.log('Message received. ', payload);
            PlaySound();
            appendMessage(payload);
        });
        
        function resetUI() {
            clearMessages();
            showToken('loading...');
            // Get registration token. Initially this makes a network call, once retrieved
            // subsequent calls to getToken will return from cache.
            messaging.getToken({ vapidKey: 'BJ7sUqmEL1ifBJkzdywgQAbUXdpFwhISyHrah_UGAnJAKNeB9E52Ggms72qxCTbwAJk_uenS6o-_k1Frh58u4a4' }).then((currentToken) => {
                if (currentToken) {
                    sendTokenToServer(currentToken);
                    updateUIForPushEnabled(currentToken);
                } else {
                    // Show permission request.
                    console.log('No registration token available. Request permission to generate one.');
                    setTokenSentToServer(false);
                }
            }).catch((err) => {
                console.log('An error occurred while retrieving token. ', err);
                showToken('Error retrieving registration token. ', err);
                setTokenSentToServer(false);
            });
        }


        function showToken(currentToken) {
            // Show token in console and UI.
            const tokenElement = document.querySelector('#token');
            tokenElement.textContent = currentToken;
        }

        // Send the registration token your application server, so that it can:
        // - send messages back to this app
        // - subscribe/unsubscribe the token from topics
        function sendTokenToServer(currentToken) {
            if (!isTokenSentToServer()) {
                console.log('Sending token to server...');
                // TODO(developer): Send the current token to your server.
                setTokenSentToServer(true);
            } else {
                console.log('Token already sent to server so won\'t send it again ' +
                    'unless it changes');
            }
        }

        function isTokenSentToServer() {
            return window.localStorage.getItem('sentToServer') === '1';
        }

        function setTokenSentToServer(sent) {
            window.localStorage.setItem('sentToServer', sent ? '1' : '0');
        }

        function showHideDiv(divId, show) {
            const div = document.querySelector('#' + divId);
            if (show) {
                div.style = 'display: visible';
            } else {
                div.style = 'display: none';
            }
        }

        function requestPermission() {
            console.log('Requesting permission...');
            Notification.requestPermission().then((permission) => {
                if (permission === 'granted') {
                    console.log('Notification permission granted.');
                    resetUI();
                } else {
                    console.log('Unable to get permission to notify.');
                }
            });
        }

        function deleteToken() {
            // Delete registration token.
            messaging.getToken().then((currentToken) => {
                messaging.deleteToken(currentToken).then(() => {
                    console.log('Token deleted.');
                    setTokenSentToServer(false);
                    // Once token is deleted update UI.
                    resetUI();
                }).catch((err) => {
                    console.log('Unable to delete token. ', err);
                });
            }).catch((err) => {
                console.log('Error retrieving registration token. ', err);
                showToken('Error retrieving registration token. ', err);
            });
        }

        // Add a message to the messages element.
        function appendMessage(payload) {
            const messagesElement = document.querySelector('#messages');
            const dataHeaderElement = document.createElement('h5');
            const dataElement = document.createElement('pre');
            dataElement.style = 'overflow-x:hidden;';
            dataHeaderElement.textContent = 'Received message:';
            dataElement.textContent = JSON.stringify(payload, null, 2);
            messagesElement.appendChild(dataHeaderElement);
            messagesElement.appendChild(dataElement);
        }

        // Clear the messages element of all children.
        function clearMessages() {
            const messagesElement = document.querySelector('#messages');
            while (messagesElement.hasChildNodes()) {
                messagesElement.removeChild(messagesElement.lastChild);
            }
        }

        function updateUIForPushEnabled(currentToken) {
            showHideDiv(tokenDivId, true);
            showToken(currentToken);
        }

        resetUI();
    </script>
}